/*
* generated by Xtext
*/
grammar InternalDependencyDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.sonatype.maven.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.sonatype.maven.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.sonatype.maven.services.DependencyDslGrammarAccess;

}

@parser::members {
 
 	private DependencyDslGrammarAccess grammarAccess;
 	
    public InternalDependencyDslParser(TokenStream input, IAstFactory factory, DependencyDslGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/sonatype/maven/parser/antlr/internal/InternalDependencyDsl.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Project";	
   	} 
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleProject
entryRuleProject returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getProjectRule(), currentNode); }
	 iv_ruleProject=ruleProject 
	 { $current=$iv_ruleProject.current; } 
	 EOF 
;

// Rule Project
ruleProject returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('project' 
    {
        createLeafNode(grammarAccess.getProjectAccess().getProjectKeyword_0(), null); 
    }
'{' 
    {
        createLeafNode(grammarAccess.getProjectAccess().getLeftCurlyBracketKeyword_1(), null); 
    }
'groupId' 
    {
        createLeafNode(grammarAccess.getProjectAccess().getGroupIdKeyword_2(), null); 
    }
':' 
    {
        createLeafNode(grammarAccess.getProjectAccess().getColonKeyword_3(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getProjectAccess().getGroupIdGroupIdParserRuleCall_4_0(), currentNode); 
	    }
	    lv_groupId_4=ruleGroupId 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProjectRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "groupId", lv_groupId_4, "GroupId", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'artifactId' 
    {
        createLeafNode(grammarAccess.getProjectAccess().getArtifactIdKeyword_5(), null); 
    }
':' 
    {
        createLeafNode(grammarAccess.getProjectAccess().getColonKeyword_6(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getProjectAccess().getArtifactIdArtifactIdParserRuleCall_7_0(), currentNode); 
	    }
	    lv_artifactId_7=ruleArtifactId 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProjectRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "artifactId", lv_artifactId_7, "ArtifactId", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'version' 
    {
        createLeafNode(grammarAccess.getProjectAccess().getVersionKeyword_8(), null); 
    }
':' 
    {
        createLeafNode(grammarAccess.getProjectAccess().getColonKeyword_9(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getProjectAccess().getVersionVersionParserRuleCall_10_0(), currentNode); 
	    }
	    lv_version_10=ruleVersion 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProjectRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "version", lv_version_10, "Version", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)('dependencies' 
    {
        createLeafNode(grammarAccess.getProjectAccess().getDependenciesKeyword_11_0(), null); 
    }
'{' 
    {
        createLeafNode(grammarAccess.getProjectAccess().getLeftCurlyBracketKeyword_11_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getProjectAccess().getDependenciesDependencyParserRuleCall_11_2_0(), currentNode); 
	    }
	    lv_dependencies_13=ruleDependency 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProjectRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "dependencies", lv_dependencies_13, "Dependency", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'}' 
    {
        createLeafNode(grammarAccess.getProjectAccess().getRightCurlyBracketKeyword_11_3(), null); 
    }
)?('mappedDependencies' 
    {
        createLeafNode(grammarAccess.getProjectAccess().getMappedDependenciesKeyword_12_0(), null); 
    }
'{' 
    {
        createLeafNode(grammarAccess.getProjectAccess().getLeftCurlyBracketKeyword_12_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getProjectAccess().getMappedDependenciesMappedDependencyParserRuleCall_12_2_0(), currentNode); 
	    }
	    lv_mappedDependencies_17=ruleMappedDependency 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProjectRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "mappedDependencies", lv_mappedDependencies_17, "MappedDependency", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'}' 
    {
        createLeafNode(grammarAccess.getProjectAccess().getRightCurlyBracketKeyword_12_3(), null); 
    }
)?('plugins' 
    {
        createLeafNode(grammarAccess.getProjectAccess().getPluginsKeyword_13_0(), null); 
    }
'{' 
    {
        createLeafNode(grammarAccess.getProjectAccess().getLeftCurlyBracketKeyword_13_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getProjectAccess().getPluginsPluginParserRuleCall_13_2_0(), currentNode); 
	    }
	    lv_plugins_21=rulePlugin 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProjectRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "plugins", lv_plugins_21, "Plugin", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'}' 
    {
        createLeafNode(grammarAccess.getProjectAccess().getRightCurlyBracketKeyword_13_3(), null); 
    }
)?('extensions' 
    {
        createLeafNode(grammarAccess.getProjectAccess().getExtensionsKeyword_14_0(), null); 
    }
'{' 
    {
        createLeafNode(grammarAccess.getProjectAccess().getLeftCurlyBracketKeyword_14_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getProjectAccess().getExtensionsExtensionParserRuleCall_14_2_0(), currentNode); 
	    }
	    lv_extensions_25=ruleExtension 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProjectRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "extensions", lv_extensions_25, "Extension", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'}' 
    {
        createLeafNode(grammarAccess.getProjectAccess().getRightCurlyBracketKeyword_14_3(), null); 
    }
)?'}' 
    {
        createLeafNode(grammarAccess.getProjectAccess().getRightCurlyBracketKeyword_15(), null); 
    }
);





// Entry rule entryRuleGA
entryRuleGA returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getGARule(), currentNode); }
	 iv_ruleGA=ruleGA 
	 { $current=$iv_ruleGA.current; } 
	 EOF 
;

// Rule GA
ruleGA returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('groupId' 
    {
        createLeafNode(grammarAccess.getGAAccess().getGroupIdKeyword_0(), null); 
    }
':' 
    {
        createLeafNode(grammarAccess.getGAAccess().getColonKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getGAAccess().getGroupIdGroupIdParserRuleCall_2_0(), currentNode); 
	    }
	    lv_groupId_2=ruleGroupId 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGARule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "groupId", lv_groupId_2, "GroupId", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)',' 
    {
        createLeafNode(grammarAccess.getGAAccess().getCommaKeyword_3(), null); 
    }
'artifactId' 
    {
        createLeafNode(grammarAccess.getGAAccess().getArtifactIdKeyword_4(), null); 
    }
':' 
    {
        createLeafNode(grammarAccess.getGAAccess().getColonKeyword_5(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getGAAccess().getArtifactIdArtifactIdParserRuleCall_6_0(), currentNode); 
	    }
	    lv_artifactId_6=ruleArtifactId 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGARule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "artifactId", lv_artifactId_6, "ArtifactId", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleDependency
entryRuleDependency returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getDependencyRule(), currentNode); }
	 iv_ruleDependency=ruleDependency 
	 { $current=$iv_ruleDependency.current; } 
	 EOF 
;

// Rule Dependency
ruleDependency returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('groupId' 
    {
        createLeafNode(grammarAccess.getDependencyAccess().getGroupIdKeyword_0(), null); 
    }
':' 
    {
        createLeafNode(grammarAccess.getDependencyAccess().getColonKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getDependencyAccess().getGroupIdGroupIdParserRuleCall_2_0(), currentNode); 
	    }
	    lv_groupId_2=ruleGroupId 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDependencyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "groupId", lv_groupId_2, "GroupId", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)',' 
    {
        createLeafNode(grammarAccess.getDependencyAccess().getCommaKeyword_3(), null); 
    }
'artifactId' 
    {
        createLeafNode(grammarAccess.getDependencyAccess().getArtifactIdKeyword_4(), null); 
    }
':' 
    {
        createLeafNode(grammarAccess.getDependencyAccess().getColonKeyword_5(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getDependencyAccess().getArtifactIdArtifactIdParserRuleCall_6_0(), currentNode); 
	    }
	    lv_artifactId_6=ruleArtifactId 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDependencyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "artifactId", lv_artifactId_6, "ArtifactId", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)',' 
    {
        createLeafNode(grammarAccess.getDependencyAccess().getCommaKeyword_7(), null); 
    }
'version' 
    {
        createLeafNode(grammarAccess.getDependencyAccess().getVersionKeyword_8(), null); 
    }
':' 
    {
        createLeafNode(grammarAccess.getDependencyAccess().getColonKeyword_9(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getDependencyAccess().getVersionVersionParserRuleCall_10_0(), currentNode); 
	    }
	    lv_version_10=ruleVersion 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDependencyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "version", lv_version_10, "Version", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)((',' 
    {
        createLeafNode(grammarAccess.getDependencyAccess().getCommaKeyword_11_0_0(), null); 
    }
'path' 
    {
        createLeafNode(grammarAccess.getDependencyAccess().getPathKeyword_11_0_1(), null); 
    }
)
    |'url' 
    {
        createLeafNode(grammarAccess.getDependencyAccess().getUrlKeyword_11_1(), null); 
    }
)?(',' 
    {
        createLeafNode(grammarAccess.getDependencyAccess().getCommaKeyword_12_0(), null); 
    }
'scope' 
    {
        createLeafNode(grammarAccess.getDependencyAccess().getScopeKeyword_12_1(), null); 
    }
)?(',' 
    {
        createLeafNode(grammarAccess.getDependencyAccess().getCommaKeyword_13_0(), null); 
    }
'classifier' 
    {
        createLeafNode(grammarAccess.getDependencyAccess().getClassifierKeyword_13_1(), null); 
    }
)?(',' 
    {
        createLeafNode(grammarAccess.getDependencyAccess().getCommaKeyword_14_0(), null); 
    }
'type' 
    {
        createLeafNode(grammarAccess.getDependencyAccess().getTypeKeyword_14_1(), null); 
    }
)?(',' 
    {
        createLeafNode(grammarAccess.getDependencyAccess().getCommaKeyword_15_0(), null); 
    }
'exclusions' 
    {
        createLeafNode(grammarAccess.getDependencyAccess().getExclusionsKeyword_15_1(), null); 
    }
'{' 
    {
        createLeafNode(grammarAccess.getDependencyAccess().getLeftCurlyBracketKeyword_15_2(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getDependencyAccess().getExclusionsGAParserRuleCall_15_3_0(), currentNode); 
	    }
	    lv_exclusions_23=ruleGA 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDependencyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "exclusions", lv_exclusions_23, "GA", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'}' 
    {
        createLeafNode(grammarAccess.getDependencyAccess().getRightCurlyBracketKeyword_15_4(), null); 
    }
)?);





// Entry rule entryRuleMappedDependency
entryRuleMappedDependency returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getMappedDependencyRule(), currentNode); }
	 iv_ruleMappedDependency=ruleMappedDependency 
	 { $current=$iv_ruleMappedDependency.current; } 
	 EOF 
;

// Rule MappedDependency
ruleMappedDependency returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(('path' 
    {
        createLeafNode(grammarAccess.getMappedDependencyAccess().getPathKeyword_0_0(), null); 
    }

    |'url' 
    {
        createLeafNode(grammarAccess.getMappedDependencyAccess().getUrlKeyword_0_1(), null); 
    }
)':' 
    {
        createLeafNode(grammarAccess.getMappedDependencyAccess().getColonKeyword_1(), null); 
    }
RULE_STRING
    { 
    createLeafNode(grammarAccess.getMappedDependencyAccess().getSTRINGTerminalRuleCall_2(), null); 
    }
(',' 
    {
        createLeafNode(grammarAccess.getMappedDependencyAccess().getCommaKeyword_3_0(), null); 
    }
'exclude' 
    {
        createLeafNode(grammarAccess.getMappedDependencyAccess().getExcludeKeyword_3_1(), null); 
    }
':' 
    {
        createLeafNode(grammarAccess.getMappedDependencyAccess().getColonKeyword_3_2(), null); 
    }
RULE_STRING
    { 
    createLeafNode(grammarAccess.getMappedDependencyAccess().getSTRINGTerminalRuleCall_3_3(), null); 
    }
)?(',' 
    {
        createLeafNode(grammarAccess.getMappedDependencyAccess().getCommaKeyword_4_0(), null); 
    }
'groupId' 
    {
        createLeafNode(grammarAccess.getMappedDependencyAccess().getGroupIdKeyword_4_1(), null); 
    }
':' 
    {
        createLeafNode(grammarAccess.getMappedDependencyAccess().getColonKeyword_4_2(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getMappedDependencyAccess().getGroupIdGroupIdParserRuleCall_4_3_0(), currentNode); 
	    }
	    lv_groupId_11=ruleGroupId 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMappedDependencyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "groupId", lv_groupId_11, "GroupId", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?(',' 
    {
        createLeafNode(grammarAccess.getMappedDependencyAccess().getCommaKeyword_5_0(), null); 
    }
'artifactId' 
    {
        createLeafNode(grammarAccess.getMappedDependencyAccess().getArtifactIdKeyword_5_1(), null); 
    }
':' 
    {
        createLeafNode(grammarAccess.getMappedDependencyAccess().getColonKeyword_5_2(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getMappedDependencyAccess().getArtifactIdArtifactIdParserRuleCall_5_3_0(), currentNode); 
	    }
	    lv_artifactId_15=ruleArtifactId 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMappedDependencyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "artifactId", lv_artifactId_15, "ArtifactId", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?(',' 
    {
        createLeafNode(grammarAccess.getMappedDependencyAccess().getCommaKeyword_6_0(), null); 
    }
'version' 
    {
        createLeafNode(grammarAccess.getMappedDependencyAccess().getVersionKeyword_6_1(), null); 
    }
':' 
    {
        createLeafNode(grammarAccess.getMappedDependencyAccess().getColonKeyword_6_2(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getMappedDependencyAccess().getVersionVersionParserRuleCall_6_3_0(), currentNode); 
	    }
	    lv_version_19=ruleVersion 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMappedDependencyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "version", lv_version_19, "Version", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?);





// Entry rule entryRulePlugin
entryRulePlugin returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPluginRule(), currentNode); }
	 iv_rulePlugin=rulePlugin 
	 { $current=$iv_rulePlugin.current; } 
	 EOF 
;

// Rule Plugin
rulePlugin returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('groupId' 
    {
        createLeafNode(grammarAccess.getPluginAccess().getGroupIdKeyword_0(), null); 
    }
':' 
    {
        createLeafNode(grammarAccess.getPluginAccess().getColonKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPluginAccess().getGroupIdGroupIdParserRuleCall_2_0(), currentNode); 
	    }
	    lv_groupId_2=ruleGroupId 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPluginRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "groupId", lv_groupId_2, "GroupId", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)',' 
    {
        createLeafNode(grammarAccess.getPluginAccess().getCommaKeyword_3(), null); 
    }
'artifactId' 
    {
        createLeafNode(grammarAccess.getPluginAccess().getArtifactIdKeyword_4(), null); 
    }
':' 
    {
        createLeafNode(grammarAccess.getPluginAccess().getColonKeyword_5(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPluginAccess().getArtifactIdArtifactIdParserRuleCall_6_0(), currentNode); 
	    }
	    lv_artifactId_6=ruleArtifactId 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPluginRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "artifactId", lv_artifactId_6, "ArtifactId", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)',' 
    {
        createLeafNode(grammarAccess.getPluginAccess().getCommaKeyword_7(), null); 
    }
'version' 
    {
        createLeafNode(grammarAccess.getPluginAccess().getVersionKeyword_8(), null); 
    }
':' 
    {
        createLeafNode(grammarAccess.getPluginAccess().getColonKeyword_9(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPluginAccess().getVersionVersionParserRuleCall_10_0(), currentNode); 
	    }
	    lv_version_10=ruleVersion 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPluginRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "version", lv_version_10, "Version", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getPluginAccess().getCommaKeyword_11_0(), null); 
    }
'phase' 
    {
        createLeafNode(grammarAccess.getPluginAccess().getPhaseKeyword_11_1(), null); 
    }
':' 
    {
        createLeafNode(grammarAccess.getPluginAccess().getColonKeyword_11_2(), null); 
    }
RULE_ID
    { 
    createLeafNode(grammarAccess.getPluginAccess().getIDTerminalRuleCall_11_3(), null); 
    }
)?(',' 
    {
        createLeafNode(grammarAccess.getPluginAccess().getCommaKeyword_12_0(), null); 
    }
'extensionId' 
    {
        createLeafNode(grammarAccess.getPluginAccess().getExtensionIdKeyword_12_1(), null); 
    }
':' 
    {
        createLeafNode(grammarAccess.getPluginAccess().getColonKeyword_12_2(), null); 
    }
RULE_ID
    { 
    createLeafNode(grammarAccess.getPluginAccess().getIDTerminalRuleCall_12_3(), null); 
    }
)?(',' 
    {
        createLeafNode(grammarAccess.getPluginAccess().getCommaKeyword_13_0(), null); 
    }
'execute' 
    {
        createLeafNode(grammarAccess.getPluginAccess().getExecuteKeyword_13_1(), null); 
    }
'{' 
    {
        createLeafNode(grammarAccess.getPluginAccess().getLeftCurlyBracketKeyword_13_2(), null); 
    }
(RULE_STRING
    { 
    createLeafNode(grammarAccess.getPluginAccess().getSTRINGTerminalRuleCall_13_3(), null); 
    }
)*'}' 
    {
        createLeafNode(grammarAccess.getPluginAccess().getRightCurlyBracketKeyword_13_4(), null); 
    }
)?);





// Entry rule entryRuleExtension
entryRuleExtension returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getExtensionRule(), currentNode); }
	 iv_ruleExtension=ruleExtension 
	 { $current=$iv_ruleExtension.current; } 
	 EOF 
;

// Rule Extension
ruleExtension returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('groupId' 
    {
        createLeafNode(grammarAccess.getExtensionAccess().getGroupIdKeyword_0(), null); 
    }
':' 
    {
        createLeafNode(grammarAccess.getExtensionAccess().getColonKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getExtensionAccess().getGroupIdGroupIdParserRuleCall_2_0(), currentNode); 
	    }
	    lv_groupId_2=ruleGroupId 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExtensionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "groupId", lv_groupId_2, "GroupId", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)',' 
    {
        createLeafNode(grammarAccess.getExtensionAccess().getCommaKeyword_3(), null); 
    }
'artifactId' 
    {
        createLeafNode(grammarAccess.getExtensionAccess().getArtifactIdKeyword_4(), null); 
    }
':' 
    {
        createLeafNode(grammarAccess.getExtensionAccess().getColonKeyword_5(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getExtensionAccess().getArtifactIdArtifactIdParserRuleCall_6_0(), currentNode); 
	    }
	    lv_artifactId_6=ruleArtifactId 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExtensionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "artifactId", lv_artifactId_6, "ArtifactId", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)',' 
    {
        createLeafNode(grammarAccess.getExtensionAccess().getCommaKeyword_7(), null); 
    }
'version' 
    {
        createLeafNode(grammarAccess.getExtensionAccess().getVersionKeyword_8(), null); 
    }
':' 
    {
        createLeafNode(grammarAccess.getExtensionAccess().getColonKeyword_9(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getExtensionAccess().getVersionVersionParserRuleCall_10_0(), currentNode); 
	    }
	    lv_version_10=ruleVersion 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExtensionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "version", lv_version_10, "Version", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)',' 
    {
        createLeafNode(grammarAccess.getExtensionAccess().getCommaKeyword_11(), null); 
    }
'extensionId' 
    {
        createLeafNode(grammarAccess.getExtensionAccess().getExtensionIdKeyword_12(), null); 
    }
':' 
    {
        createLeafNode(grammarAccess.getExtensionAccess().getColonKeyword_13(), null); 
    }
RULE_ID
    { 
    createLeafNode(grammarAccess.getExtensionAccess().getIDTerminalRuleCall_14(), null); 
    }
',' 
    {
        createLeafNode(grammarAccess.getExtensionAccess().getCommaKeyword_15(), null); 
    }
'execute' 
    {
        createLeafNode(grammarAccess.getExtensionAccess().getExecuteKeyword_16(), null); 
    }
'{' 
    {
        createLeafNode(grammarAccess.getExtensionAccess().getLeftCurlyBracketKeyword_17(), null); 
    }
(RULE_STRING
    { 
    createLeafNode(grammarAccess.getExtensionAccess().getSTRINGTerminalRuleCall_18(), null); 
    }
)*'}' 
    {
        createLeafNode(grammarAccess.getExtensionAccess().getRightCurlyBracketKeyword_19(), null); 
    }
);







// Entry rule entryRuleGroupId
entryRuleGroupId returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getGroupIdRule(), currentNode); } 
	 iv_ruleGroupId=ruleGroupId 
	 { $current=$iv_ruleGroupId.current.getText(); }  
	 EOF 
;

// Rule GroupId
ruleGroupId returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    createLeafNode(grammarAccess.getGroupIdAccess().getIDTerminalRuleCall_0(), null); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getGroupIdAccess().getFullStopKeyword_1_0(), null); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getGroupIdAccess().getHyphenMinusKeyword_1_1(), null); 
    }
)?)*
    ;





// Entry rule entryRuleArtifactId
entryRuleArtifactId returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getArtifactIdRule(), currentNode); } 
	 iv_ruleArtifactId=ruleArtifactId 
	 { $current=$iv_ruleArtifactId.current.getText(); }  
	 EOF 
;

// Rule ArtifactId
ruleArtifactId returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    createLeafNode(grammarAccess.getArtifactIdAccess().getIDTerminalRuleCall_0(), null); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getArtifactIdAccess().getFullStopKeyword_1_0(), null); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getArtifactIdAccess().getHyphenMinusKeyword_1_1(), null); 
    }
)?)*
    ;





// Entry rule entryRuleVersion
entryRuleVersion returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getVersionRule(), currentNode); } 
	 iv_ruleVersion=ruleVersion 
	 { $current=$iv_ruleVersion.current.getText(); }  
	 EOF 
;

// Rule Version
ruleVersion returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    createLeafNode(grammarAccess.getVersionAccess().getINTTerminalRuleCall_0(), null); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getVersionAccess().getFullStopKeyword_1_0(), null); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    createLeafNode(grammarAccess.getVersionAccess().getINTTerminalRuleCall_1_1(), null); 
    }
)*)
    ;







// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getImportRule(), currentNode); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('import' 
    {
        createLeafNode(grammarAccess.getImportAccess().getImportKeyword_0(), null); 
    }
(	
	
	    lv_importURI_1=	RULE_STRING
	{
		createLeafNode(grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0(), "importURI"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImportRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "importURI", lv_importURI_1, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getTypeRule(), currentNode); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getSimpleTypeParserRuleCall_0(), currentNode); 
    }
    this_SimpleType_0=ruleSimpleType
    { 
        $current = $this_SimpleType_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getEntityParserRuleCall_1(), currentNode); 
    }
    this_Entity_1=ruleEntity
    { 
        $current = $this_Entity_1.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleSimpleType
entryRuleSimpleType returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSimpleTypeRule(), currentNode); }
	 iv_ruleSimpleType=ruleSimpleType 
	 { $current=$iv_ruleSimpleType.current; } 
	 EOF 
;

// Rule SimpleType
ruleSimpleType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('type' 
    {
        createLeafNode(grammarAccess.getSimpleTypeAccess().getTypeKeyword_0(), null); 
    }
(	
	
	    lv_name_1=	RULE_ID
	{
		createLeafNode(grammarAccess.getSimpleTypeAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSimpleTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleEntity
entryRuleEntity returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getEntityRule(), currentNode); }
	 iv_ruleEntity=ruleEntity 
	 { $current=$iv_ruleEntity.current; } 
	 EOF 
;

// Rule Entity
ruleEntity returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('entity' 
    {
        createLeafNode(grammarAccess.getEntityAccess().getEntityKeyword_0(), null); 
    }
(	
	
	    lv_name_1=	RULE_ID
	{
		createLeafNode(grammarAccess.getEntityAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEntityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)('extends' 
    {
        createLeafNode(grammarAccess.getEntityAccess().getExtendsKeyword_2_0(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getEntityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getEntityAccess().getExtendsEntityCrossReference_2_1_0(), "extends"); 
	}

		// TODO assign feature to currentNode
	
))?'{' 
    {
        createLeafNode(grammarAccess.getEntityAccess().getLeftCurlyBracketKeyword_3(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getEntityAccess().getPropertiesPropertyParserRuleCall_4_0(), currentNode); 
	    }
	    lv_properties_5=ruleProperty 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEntityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "properties", lv_properties_5, "Property", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'}' 
    {
        createLeafNode(grammarAccess.getEntityAccess().getRightCurlyBracketKeyword_5(), null); 
    }
);





// Entry rule entryRuleProperty
entryRuleProperty returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPropertyRule(), currentNode); }
	 iv_ruleProperty=ruleProperty 
	 { $current=$iv_ruleProperty.current; } 
	 EOF 
;

// Rule Property
ruleProperty returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('property' 
    {
        createLeafNode(grammarAccess.getPropertyAccess().getPropertyKeyword_0(), null); 
    }
(	
	
	    lv_name_1=	RULE_ID
	{
		createLeafNode(grammarAccess.getPropertyAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)':' 
    {
        createLeafNode(grammarAccess.getPropertyAccess().getColonKeyword_2(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getPropertyAccess().getTypeTypeCrossReference_3_0(), "type"); 
	}

		// TODO assign feature to currentNode
	
)(	
	
	    lv_many_4='[]' 
    {
        createLeafNode(grammarAccess.getPropertyAccess().getManyLeftSquareBracketRightSquareBracketKeyword_4_0(), "many"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "many", true, "[]", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?);





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


